# -*- coding: utf-8 -*-
"""Health AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qG0w4cMQSxerRSm8w_7J5qFmg_G3uB2
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -------------------------------
# Load model and tokenizer
# -------------------------------
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -------------------------------
# Response Generator
# -------------------------------
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=1024)
    inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    decoded = tokenizer.decode(outputs[0], skip_special_tokens=True)
    # Remove prompt from response
    response = decoded[len(prompt):].strip()
    return response

# -------------------------------
# Medical Functions
# -------------------------------
def disease_prediction(symptoms):
    prompt = f"""Based on the following symptoms, provide possible medical conditions and general medication suggestions.
Always emphasize the importance of consulting a doctor for proper diagnosis.

Symptoms: {symptoms}

Possible conditions and recommendations:

**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper diagnosis and treatment.**

Analysis:"""
    return generate_response(prompt, max_length=1200)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"""Generate personalized treatment suggestions for the following patient information.
Include home remedies and general medication guidelines.

Medical Condition: {condition}
Age: {age}
Gender: {gender}
Medical History: {medical_history}

Personalized treatment plan including home remedies and medication guidelines:

**IMPORTANT: This is for informational purposes only. Please consult a healthcare professional for proper treatment.**

Treatment Plan:"""
    return generate_response(prompt, max_length=1200)

# -------------------------------
# Gradio App
# -------------------------------
with gr.Blocks() as app:
    gr.Markdown("# ðŸ©º Medical AI Assistant")
    gr.Markdown("**Disclaimer: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
        # Disease Prediction Tab
        with gr.TabItem("Disease Prediction"):
            with gr.Row():
                with gr.Column():
                    symptoms_input = gr.Textbox(
                        label="Enter Symptoms",
                        placeholder="e.g., fever, headache, cough, fatigue...",
                        lines=4
                    )
                    predict_btn = gr.Button("Analyze Symptoms")

                with gr.Column():
                    prediction_output = gr.Markdown()

            predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

        # Treatment Plan Tab
        with gr.TabItem("Treatment Plans"):
            with gr.Row():
                with gr.Column():
                    condition_input = gr.Textbox(
                        label="Medical Condition",
                        placeholder="e.g., diabetes, hypertension, migraine...",
                        lines=2
                    )
                    age_input = gr.Number(label="Age", value=30)
                    gender_input = gr.Dropdown(
                        choices=["Male", "Female", "Other"],
                        label="Gender",
                        value="Male"
                    )
                    history_input = gr.Textbox(
                        label="Medical History",
                        placeholder="Previous conditions, allergies, medications or None",
                        lines=3
                    )
                    plan_btn = gr.Button("Generate Treatment Plan")

                with gr.Column():
                    plan_output = gr.Markdown()

            plan_btn.click(
                treatment_plan,
                inputs=[condition_input, age_input, gender_input, history_input],
                outputs=plan_output
            )

# -------------------------------
# Launch App
# -------------------------------
app.launch(server_name="0.0.0.0", server_port=7860, share=True)